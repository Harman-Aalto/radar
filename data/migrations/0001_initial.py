# Generated by Django 4.2.18 on 2025-03-28 11:34

import data.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("aplus_client", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("api_id", models.IntegerField()),
                ("url", models.URLField()),
                ("updated", models.DateTimeField(auto_now=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "key",
                    data.models.URLKeyField(
                        help_text="Unique alphanumeric course instance id",
                        max_length=64,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive course name", max_length=255
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        choices=[("a+", "A+"), ("filesystem", "File system")],
                        default="a+",
                        help_text="Provider for submission data",
                        max_length=16,
                    ),
                ),
                (
                    "tokenizer",
                    models.CharField(
                        choices=[
                            ("skip", "Skip"),
                            ("scala", "Scala"),
                            ("python", "Python"),
                            ("js", "JavaScript (ECMA 2016)"),
                            ("html", "HTML5"),
                            ("css", "CSS"),
                            ("c", "C"),
                            ("cpp", "C++"),
                            ("matlab", "MATLAB"),
                        ],
                        default="skip",
                        help_text="Tokenizer for the submission contents",
                        max_length=16,
                    ),
                ),
                (
                    "minimum_match_tokens",
                    models.IntegerField(
                        default=15,
                        help_text="Minimum number of tokens to consider a match",
                    ),
                ),
                ("archived", models.BooleanField(db_index=True, default=False)),
                (
                    "similarity_graph_json",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="JSON-serialized string of the similarity graph definition returned by data.graph.generate_match_graph",
                    ),
                ),
                (
                    "namespace",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="aplus_client.apinamespace",
                    ),
                ),
                (
                    "reviewers",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Reviewers for match analysis",
                        related_name="courses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created"],
            },
        ),
        migrations.CreateModel(
            name="Exercise",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "key",
                    data.models.URLKeyField(
                        help_text="Alphanumeric exercise id", max_length=64
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        default="unknown",
                        help_text="Descriptive exercise name",
                        max_length=255,
                    ),
                ),
                (
                    "override_tokenizer",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("skip", "Skip"),
                            ("scala", "Scala"),
                            ("python", "Python"),
                            ("js", "JavaScript (ECMA 2016)"),
                            ("html", "HTML5"),
                            ("css", "CSS"),
                            ("c", "C"),
                            ("cpp", "C++"),
                            ("matlab", "MATLAB"),
                        ],
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "override_minimum_match_tokens",
                    models.IntegerField(blank=True, null=True),
                ),
                ("template_tokens", models.TextField(blank=True, default="")),
                ("paused", models.BooleanField(default=False)),
                (
                    "matching_start_time",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="If not None, then an isoformat timestamp which should match to all incoming matching results. If None or does not match incoming results, then these results will be ignored.",
                        max_length=50,
                        null=True,
                    ),
                ),
                ("dolos_report_status", models.TextField(blank=True, default="")),
                ("dolos_report_timestamp", models.TextField(blank=True, default="")),
                (
                    "dolos_report_raw_timestamp",
                    models.IntegerField(blank=True, default=0),
                ),
                ("dolos_report_id", models.TextField(blank=True, default="")),
                (
                    "dolos_report_generated",
                    models.BooleanField(blank=True, default=False),
                ),
                ("dolos_report_key", models.TextField(blank=True, default="")),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exercises",
                        to="data.course",
                    ),
                ),
            ],
            options={
                "ordering": ["course", "name", "created"],
                "unique_together": {("course", "key")},
            },
        ),
        migrations.CreateModel(
            name="Student",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "key",
                    data.models.URLKeyField(
                        help_text="Alphanumeric student id", max_length=64
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        default="No Name",
                        help_text="Full name of the student",
                        max_length=64,
                    ),
                ),
                (
                    "email",
                    models.EmailField(blank=True, default="No Email", max_length=254),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="students",
                        to="data.course",
                    ),
                ),
            ],
            options={
                "ordering": ["course", "key"],
                "unique_together": {("course", "key")},
            },
        ),
        migrations.CreateModel(
            name="TaskError",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("package", models.CharField(default="-empty-", max_length=100)),
                ("namespace", models.CharField(default="-empty-", max_length=200)),
                ("error_string", models.TextField()),
            ],
            options={
                "ordering": ["-created"],
            },
        ),
        migrations.CreateModel(
            name="Submission",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "key",
                    data.models.URLKeyField(
                        help_text="Alphanumeric unique submission id",
                        max_length=64,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "provider_url",
                    models.CharField(
                        blank=True, default=None, max_length=256, null=True
                    ),
                ),
                (
                    "provider_submission_time",
                    models.DateTimeField(blank=True, default=None, null=True),
                ),
                ("grade", models.FloatField(default=0.0)),
                ("tokens", models.TextField(blank=True, default=None, null=True)),
                (
                    "source_checksum",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="MD5 checksum of all characters in the submission source",
                        null=True,
                    ),
                ),
                ("indexes_json", models.TextField(blank=True, default=None, null=True)),
                (
                    "authored_token_count",
                    models.IntegerField(blank=True, default=None, null=True),
                ),
                (
                    "longest_authored_tile",
                    models.IntegerField(blank=True, default=None, null=True),
                ),
                (
                    "max_similarity",
                    models.FloatField(
                        db_index=True,
                        default=0.0,
                        help_text="Maximum average similarity.",
                    ),
                ),
                (
                    "matched",
                    models.BooleanField(
                        default=False,
                        help_text="Is this Submission waiting to be matched",
                    ),
                ),
                (
                    "invalid",
                    models.BooleanField(
                        default=False,
                        help_text="Is this Submission invalid in a way it cannot be matched",
                    ),
                ),
                (
                    "matching_start_time",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="If not None, then this submission is currently being matched and waiting for results. None if submission is not currently being matched.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "exercise",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submissions",
                        to="data.exercise",
                    ),
                ),
                (
                    "max_with",
                    models.ForeignKey(
                        blank=True,
                        help_text="The submission the max_similarity refers to",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="data.submission",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submissions",
                        to="data.student",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Comparison",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "similarity",
                    models.FloatField(
                        default=None,
                        help_text="Similarity score resulting from the comparison of two submissions.",
                        null=True,
                    ),
                ),
                (
                    "matches_json",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="JSON-serialized array of 3-element arrays, containing the index mappings and lengths of matches. E.g. [[i, j, n], ... ] where n is the match length, i starting index of the match in submission_a, and j in submission_b.",
                        null=True,
                    ),
                ),
                (
                    "review",
                    models.IntegerField(
                        choices=[
                            (-10, "False alert"),
                            (0, "Unspecified match"),
                            (1, "Approved plagiate"),
                            (5, "Suspicious match"),
                            (10, "Plagiate"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "submission_a",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="data.submission",
                    ),
                ),
                (
                    "submission_b",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="data.submission",
                    ),
                ),
            ],
            options={
                "ordering": ["-similarity"],
                "unique_together": {("submission_a", "submission_b")},
            },
        ),
    ]
